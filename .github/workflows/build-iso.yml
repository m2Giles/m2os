name: Build ISOs
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      images:
        description: "The images to build"
        required: true
        type: string
      image_version:
        description: "The Image Version: stable, beta..."
        required: false
        type: string
      image_flavor:
        type: string

env:
  IMAGE_REGISTRY: ghcr.io/m2giles
  IMAGE_NAME: m2os

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_version }}-${{ inputs.image_flavor }}.iso
  cancel-in-progress: true

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_tag: ["${{ fromJson(inputs.images) }}"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Items
        shell: bash
        run: |
          set -eoux pipefail
          rm -rf "${PWD}"/m2os_build/lorax_templates
          mkdir -p ${PWD}/m2os_build/lorax_templates
          tee ${PWD}/m2os_build/lorax_templates/remove_root_password_prompt.tmpl <<'EOF'
          append etc/anaconda/profile.d/fedora-kinoite.conf "\\n[User Interface]\\nhidden_spokes =\\n    PasswordSpoke"
          EOF

          image_version="${{ inputs.image_version }}"
          image_tag="${{ matrix.image_tag }}"

          if [[ -z ${image_version:-} ]]; then
            image_version=stable
          fi

          if [[ "${image_version}" =~ stable && ! "${image_tag}" =~ bazzite ]]; then
            image_version=stable-daily
          elif [[ "${image_version}" =~ beta && "${image_tag}" =~ bazzite ]]; then
            image_version=unstable
          fi

          if [[ "${image_version}" =~ beta ]]; then
            image_tag="${image_tag}-beta"
          fi

          if [[ "${image_tag}" =~ bazzite ]]; then
            skopeo inspect docker://ghcr.io/ublue-os/bazzite:"${image_version}" > /tmp/inspect.json
          else
            skopeo inspect docker://ghcr.io/ublue-os/bluefin:"${image_version}" > /tmp/inspect.json
          fi

          fedora_version=$(jq -r '.Labels["ostree.linux"]' < /tmp/inspect.json | grep -oP 'fc\K[0-9]+')
          
          echo "fedora_version=${fedora_version}" >> "$GITHUB_ENV" 
          echo "image_tag=${image_tag}" >> "$GITHUB_ENV"

      - name: Maximize Build Space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Flatpak Dependencies
        id: flatpak-dependencies
        env:
          IMAGE_FULL: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.image_tag }}
        shell: bash
        run: |
          set -eoux pipefail
          IMAGE="${IMAGE_FULL}"

          # Create temporary directory
          TEMP_FLATPAK_INSTALL_DIR=$(mktemp -d -p /tmp flatpak-XXXXXX)
          FLATPAK_REFS_DIR=./flatpak-refs
          FLATPAK_REFS_DIR_ABS=$(realpath "${FLATPAK_REFS_DIR}")
          mkdir -p "${FLATPAK_REFS_DIR}"

          case "${IMAGE}" in
          *"aurora"*)
              FLATPAK_LIST_URL="https://raw.githubusercontent.com/ublue-os/bluefin/refs/heads/main/aurora_flatpaks/flatpaks"
            ;;
          *"bazzite"*)
              FLATPAK_LIST_URL="https://raw.githubusercontent.com/ublue-os/bazzite/refs/heads/main/installer/gnome_flatpaks/flatpaks"
            ;;
          *"bluefin"*)
              FLATPAK_LIST_URL="https://raw.githubusercontent.com/ublue-os/bluefin/refs/heads/main/bluefin_flatpaks/flatpaks"
            ;;
          *"cosmic"*)
              FLATPAK_LIST_URL="https://raw.githubusercontent.com/ublue-os/cosmic/refs/heads/main/flatpaks.txt"
            ;;
          esac

          curl -Lo ${FLATPAK_REFS_DIR_ABS}/flatpaks.txt "${FLATPAK_LIST_URL}"

          ADDITIONAL_FLATPAKS=(
            app/com.discordapp.Discord/x86_64/stable
            app/com.google.Chrome/x86_64/stable
            app/com.microsoft.Edge/x86_64/stable
            app/com.spotify.Client/x86_64/stable
            app/org.gimp.GIMP/x86_64/stable
            app/org.keepassxc.KeePassXC/x86_64/stable
            app/org.libreoffice.LibreOffice/x86_64/stable
            app/org.prismlauncher.PrismLauncher/x86_64/stable
          )

          if [[ "$IMAGE" =~ cosmic ]]; then
            ADDITIONAL_FLATPAKS+=(
              app/org.gnome.World.PikaBackup/x86_64/stable
            )
          fi

          if [[ "$IMAGE" =~ aurora|bluefin|cosmic ]]; then
            ADDITIONAL_FLATPAKS+=(
              app/com.github.Matoking.protontricks/x86_64/stable
              app/io.github.fastrizwaan.WineZGUI/x86_64/stable
              app/it.mijorus.gearlever/x86_64/stable
              app/com.vysp3r.ProtonPlus/x86_64/stable
              runtime/org.freedesktop.Platform.VulkanLayer.MangoHud/x86_64/23.08
              runtime/org.freedesktop.Platform.VulkanLayer.vkBasalt/x86_64/23.08
              runtime/org.freedesktop.Platform.VulkanLayer.OBSVkCapture/x86_64/23.08
              runtime/com.obsproject.Studio.Plugin.OBSVkCapture/x86_64/stable
              runtime/com.obsproject.Studio.Plugin.Gstreamer/x86_64/stable
              runtime/com.obsproject.Studio.Plugin.GStreamerVaapi/x86_64/stable
              runtime/org.gtk.Gtk3theme.adw-gtk3/x86_64/3.22
              runtime/org.gtk.Gtk3theme.adw-gtk3-dark/x86_64/3.22
            )
          fi

          if [[ "$IMAGE" =~ bazzite ]]; then
            ADDITIONAL_FLATPAKS+=(
              app/org.gnome.World.PikaBackup/x86_64/stable
            )
          fi

          # Read the list of Flatpak packages from the manifest
          FLATPAK_REFS=()
          while IFS= read -r line; do
            FLATPAK_REFS+=("$line")
          done < "${FLATPAK_REFS_DIR}/flatpaks.txt"
          FLATPAK_REFS+=("${ADDITIONAL_FLATPAKS[@]}")

          echo "Flatpak refs: ${FLATPAK_REFS[@]}"

          # Generate installation script
          cat <<EOF > "${TEMP_FLATPAK_INSTALL_DIR}/install-flatpaks.sh"
          mkdir -p /flatpak/flatpak /flatpak/triggers
          mkdir /var/tmp
          chmod -R 1777 /var/tmp
          flatpak config --system --set languages "*"
          flatpak remote-add --system flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install --system -y flathub ${FLATPAK_REFS[@]}
          ostree refs --repo=\${FLATPAK_SYSTEM_DIR}/repo | grep '^deploy/' | grep -v 'org\.freedesktop\.Platform\.openh264' | sed 's/^deploy\///g' > /output/flatpaks-with-deps
          EOF
          docker run --rm --privileged \
            --entrypoint /bin/bash \
            -e FLATPAK_SYSTEM_DIR=/flatpak/flatpak \
            -e FLATPAK_TRIGGERS_DIR=/flatpak/triggers \
            -v ${FLATPAK_REFS_DIR_ABS}:/output \
            -v ${TEMP_FLATPAK_INSTALL_DIR}:/temp_flatpak_install_dir \
            ${IMAGE} /temp_flatpak_install_dir/install-flatpaks.sh
          docker rmi ${IMAGE}
          cat ${FLATPAK_REFS_DIR}/flatpaks-with-deps

          echo "FLATPAK_REFS_DIR=${FLATPAK_REFS_DIR}" >> $GITHUB_OUTPUT

      - name: Build ISOs
        uses: jasonn3/build-container-installer@v1.2.2
        id: build
        with:
          arch: x86_64
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ env.IMAGE_REGISTRY }}
          variant: "Kinoite"
          version: ${{ env.fedora_version }}
          image_tag: ${{ env.image_tag }}
          secure_boot_key_url: "https://github.com/ublue-os/akmods/raw/main/certs/public_key.der"
          enrollment_password: "universalblue"
          iso_name: ${{ env.image_tag }}.iso
          flatpak_remote_refs_dir: ${{ steps.flatpak-dependencies.outputs.FLATPAK_REFS_DIR }}
          enable_flatpak_dependencies: false
          additional_templates: "/github/workspace/m2os_build/lorax_templates/remove_root_password_prompt.tmpl"

      - name: Upload ISOs and Checksum to Job Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.image_tag }}
          path: |
            ${{ steps.build.outputs.iso_path }}
            ${{ steps.build.outputs.iso_path }}-CHECKSUM
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true
