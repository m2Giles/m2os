name: Generate Release
on:
  workflow_call:
    inputs:
      target:
        type: string
  workflow_dispatch:
    inputs:
      target:
        description: 'Release Branch (e.g., testing). Defaults to branch name.'
        type: choice
        options:
          - stable
          - bazzite
          - ucore
      handwritten:
        description: "Handwritten Notes"
        type: string

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout last 500 commits (for <commits> to work)
        uses: actions/checkout@v4
        with:
          fetch-depth: 500
        
      - name: Download Artifacts
        if: contains(fromJson('["stable", "bazzite"]'), inputs.target)
        uses: actions/download-artifact@v4
        with:
          pattern: url-${{ inputs.target }}-*
          merge-multiple: true
        
      - name: Merge Artifacts into url.md
        id: merge-artifacts
        if: contains(fromJson('["stable", "bazzite"]'), inputs.target)
        shell: bash
        run: |
          for artifact in $(find url-${{ inputs.target }}-*.zip);
          do
            unzip $artifact
            cat ${artifact:0:-4} >> url.md 
          done
          echo "urlmd=url.md" >> $GITHUB_OUTPUT

      - name: Generate Release Text
        id: generate-release
        run: |
          python3 ./changelogs.py \
            "${{ inputs.target }}" \
            ./output.env ./changelog.md --workdir . --handwritten "${{ inputs.handwritten }}" --urlmd "${{ steps.merge-artifacts.outputs.urlmd }}"
          source ./output.env
          echo "title=${TITLE}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: contains(fromJson('["workflow_dispatch", "merge_group"]'), github.event_name) || github.event.schedule == '41 6 * * 0'
        with:
          name: ${{ steps.generate-release.outputs.title }}
          tag_name: ${{ steps.generate-release.outputs.tag }}
          body_path: ./changelog.md
          make_latest: ${{ github.event.inputs.target == 'stable' }}
          prerelease: ${{ github.event.inputs.target != 'stable' }}