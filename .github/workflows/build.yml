name: Build m2os
on:
  schedule:
    - cron: "41 6 * * 2" # 6:41 UTC every Tuesday
  push:
    branches:
      - main
  merge_group:
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: m2os

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  push-ghcr:
    name: Build Images
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - bluefin
          - bluefin-nvidia
          - aurora
          - aurora-nvidia
          - cosmic-base
          - cosmic-base-nvidia
          - bazzite-deck-gnome
          - bazzite-gnome-nvidia
    steps:
      - name: Build Variables
        id: labels
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            if [[ "${{ matrix.image }}" =~ cosmic ]]; then
              tag_version=40
            else
              tag_version=stable
            fi
            KERNEL_RELEASE=$(skopeo inspect docker://ghcr.io/ublue-os/${{ matrix.image }}:"$tag_version" | jq -r '.Labels["ostree.linux"] | split(".x86_64")[0]')
            fedora_version=$(echo $KERNEL_RELEASE | grep -oP 'fc\K[0-9]+')
            ver=$(skopeo inspect docker://ghcr.io/ublue-os/${{ matrix.image }}:"$tag_version" | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            nvidia=""
            if [[ ${{ matrix.image }} =~ "bazzite" ]]; then
              kernel_flavor=fsync
              upstream_repo=bazzite
              image="${{ matrix.image }}"
            elif [[ "${{ matrix.image }}" =~ cosmic ]]; then
              kernel_flavor=coreos-stable
              upstream_repo=cosmic
              image=cosmic-base
              if [[ "${{ matrix.image }}" =~ nvidia ]]; then
                 nvidia=nvidia
              fi
            elif [[ "${{ matrix.image }}" =~ bluefin|aurora ]]; then
              kernel_flavor=coreos-stable
              upstream_repo=bluefin
              image="${{ matrix.image }}"
            fi
            echo "nvidia=$nvidia" >> $GITHUB_ENV
            echo "version=$ver" >> $GITHUB_ENV
            echo "tag_version=$tag_version" >> $GITHUB_ENV
            echo "kernel_release=${KERNEL_RELEASE}" >> $GITHUB_ENV
            echo "fedora_version=${fedora_version}" >> $GITHUB_ENV
            echo "kernel_flavor=${kernel_flavor}" >> $GITHUB_ENV
            echo "upstream_repo=${upstream_repo}" >> $GITHUB_ENV
            echo "image=${image}" >> $GITHUB_ENV

      - name: Verify Base Image
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: ${{ env.image }}:${{ env.tag_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/${{ env.upstream_repo }}/main/cosign.pub
          registry: ghcr.io/ublue-os

      # - name: Pull Images
      #   uses: Wandalen/wretry.action@v3.5.0
      #   id: pull
      #   with:
      #     attempt_limit: 3
      #     attempt_delay: 15000
      #     command: |
      #       set -eoux pipefail
      #       sudo podman pull ghcr.io/ublue-os/akmods:${{ env.kernel_flavor }}-${{ env.fedora_version }}
      #       sudo podman pull ghcr.io/ublue-os/akmods-nvidia:${{ env.kernel_flavor }}-${{ env.fedora_version }}
      #       sudo podman pull ghcr.io/ublue-os/akmods-zfs:coreos-stable-${{ env.fedora_version }}
      #       sudo podman pull ghcr.io/ublue-os/coreos-stable-kernel:${{ env.fedora_version }}
      #       sudo podman pull ghcr.io/ublue-os/${{ env.image }}:${{ env.tag_version }}
      #       sudo podman pull ghcr.io/hhd-dev/rechunk:v0.5.0

      - name: Pull Images
        uses: Wandalen/wretry.action@v3.5.0
        id: pull
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eoux pipefail
            podman pull ghcr.io/ublue-os/akmods:${{ env.kernel_flavor }}-${{ env.fedora_version }}
            podman pull ghcr.io/ublue-os/akmods-nvidia:${{ env.kernel_flavor }}-${{ env.fedora_version }}
            podman pull ghcr.io/ublue-os/akmods-zfs:coreos-stable-${{ env.fedora_version }}
            podman pull ghcr.io/ublue-os/coreos-stable-kernel:${{ env.fedora_version }}
            podman pull ghcr.io/ublue-os/${{ env.image }}:${{ env.tag_version }}
            # podman pull ghcr.io/hhd-dev/rechunk:v0.5.0

      - name: Checkout Push to Registry Action
        uses: actions/checkout@v4

      - name: Maximize Build Space
        if: matrix.image == 'bazzite-gnome-nvidia' || matrix.image == 'bazzite-deck-gnome'
        uses: ublue-os/remove-unwanted-software@v7

      - name: Generate Tags
        id: generate_tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          if [[ "${{ matrix.image }}" =~ bazzite-deck ]]; then
             tag="bazzite-deck"
          elif [[ "${{ matrix.image }}" =~ bazzite ]]; then
             tag="bazzite"
          elif [[ "${{ matrix.image }}" =~ cosmic-.*-nvidia ]]; then
             tag="cosmic-nvidia"
          elif [[ "${{ matrix.image }}" =~ cosmic ]]; then
             tag="cosmic"
          else
             tag=${{ matrix.image }}
          fi
          BUILD_TAGS+=("${tag}" "${tag}-${TIMESTAMP}")
          for TAG in "${BUILD_TAGS[@]}"; do
            echo "${TAG}"
          done
          echo "default_tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "build_tags=${BUILD_TAGS[*]}" >> "$GITHUB_OUTPUT"

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=m2os is my OCI image built from ublue projects. It mainly extends bazzite/bluefin for my uses.
            org.opencontainers.image.version=${{ env.version }}
            ostree.linux=${{ env.kernel_release }}.x86_64

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.generate_tags.outputs.build_tags }}
          build-args: |
            IMAGE=${{ env.image }}
            TAG_VERSION=${{ env.tag_version }}
            FEDORA_VERSION=${{ env.fedora_version }}
            KERNEL_FLAVOR=${{ env.kernel_flavor }}
            NVIDIA=${{ env.nvidia }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # - name: Build Image
      #   id: build_image
      #   shell: bash
      #   run: |
      #     sudo buildah build \
      #       --format "docker" \
      #       --build-arg IMAGE=${{ env.image }} \
      #       --build-arg TAG_VERSION=${{ env.tag_version }} \
      #       --build-arg FEDORA_VERSION=${{ env.fedora_version }} \
      #       --build-arg KERNEL_FLAVOR=${{ env.kernel_flavor }} \
      #       --build-arg NVIDIA=${{ env.nvidia }} \
      #       --tag raw-img .

      # - name: Remove old Images
      #   run: |
      #     set -eoux pipefail
      #     sudo podman image rm ghcr.io/ublue-os/akmods:${{ env.kernel_flavor }}-${{ env.fedora_version }}
      #     sudo podman image rm ghcr.io/ublue-os/akmods-nvidia:${{ env.kernel_flavor }}-${{ env.fedora_version }}
      #     sudo podman image rm ghcr.io/ublue-os/akmods-zfs:coreos-stable-${{ env.fedora_version }}
      #     sudo podman image rm ghcr.io/ublue-os/coreos-stable-kernel:${{ env.fedora_version }}
      #     sudo podman image rm ghcr.io/ublue-os/${{ env.image }}:${{ env.tag_version }}

      # - name: Rechunk Image
      #   id: rechunk
      #   uses: hhd-dev/rechunk@v0.5.0
      #   with:
      #     ref: "localhost/raw-img"
      #     prev-ref: "ghcr.io/m2giles/m2os:${{ steps.generate_tags.outputs.default_tag }}"
      #     version: "${{ env.version }}"
      #     rechunk: "ghcr.io/hhd-dev/rechunk:v0.5.0"
      #     labels: |
      #       org.opencontainers.image.title=${{ env.IMAGE_NAME }}
      #       org.opencontainers.image.description=m2os is my OCI image built from ublue projects. It mainly extends bazzite/bluefin for my uses.
      #       org.opencontainers.image.version=${{ env.version }}
      #       ostree.linux=${{ env.kernel_release }}.x86_64

      # - name: Load into Podman and Tag
      #   shell: bash
      #   run: |
      #     IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
      #     sudo rm -rf ${{ steps.rechunk.outputs.output }}
      #     for tag in ${{ steps.generate_tags.outputs.alias_tags }}; do
      #       podman tag $IMAGE m2os:$tag
      #     done

      - name: Check Secureboot
        id: secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          podman run --rm "${{ env.IMAGE_NAME }}":$(echo "${{ steps.generate_tags.outputs.build_tags }}" | cut -d " " -f 1) /bin/bash -c "cat /usr/lib/modules/*/vmlinuz" > vmlinuz
          sbverify --list vmlinuz
          curl -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert akmods.crt vmlinuz

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push to GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@v3.5.0
        if: github.event_name != 'pull_request'

      - name: Sign Container Image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/m2os@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo Outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
