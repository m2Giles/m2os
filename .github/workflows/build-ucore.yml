name: Build m2os-ucore
on:
    workflow_call:
    workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: m2os

jobs:
  push-ucore:
    name: Build Ucore Images
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - stable-zfs
          - stable-nvidia-zfs
    steps:
      - name: Build Variables
        id: labels
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eoux pipefail
            tag_version=${{ matrix.image }}
            KERNEL_RELEASE=$(skopeo inspect docker://ghcr.io/ublue-os/ucore-hci:${tag_version} | jq -r '.Labels["ostree.linux"]')
            upstream_repo=ucore
            image=ucore-hci
            fedora_version=$(echo $KERNEL_RELEASE | grep -oP 'fc\K[0-9]+')
            ver=$(skopeo inspect docker://ghcr.io/ublue-os/${image}:"$tag_version" | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "version=$ver" >> $GITHUB_ENV
            echo "tag_version=$tag_version" >> $GITHUB_ENV
            echo "kernel_release=${KERNEL_RELEASE}" >> $GITHUB_ENV
            echo "fedora_version=${fedora_version}" >> $GITHUB_ENV
            echo "upstream_repo=${upstream_repo}" >> $GITHUB_ENV
            echo "image=${image}" >> $GITHUB_ENV

      - name: Verify Base Image
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: ${{ env.image }}:${{ env.tag_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/${{ env.upstream_repo }}/main/cosign.pub
          registry: ghcr.io/ublue-os

      - name: Pull Images
        uses: Wandalen/wretry.action@v3.5.0
        id: pull
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eoux pipefail
            podman pull ghcr.io/ublue-os/${{ env.image }}:${{ env.tag_version }}

      - name: Checkout Push to Registry Action
        uses: actions/checkout@v4

      - name: Maximize Build Space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Generate Tags
        id: generate_tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          if [[ "${{ env.tag_version }}" =~ nvidia ]]; then
            tag="ucore-nvidia"
          else
            tag="ucore"
          fi
          BUILD_TAGS+=("${tag}" "${tag}-${TIMESTAMP}")
          for TAG in "${BUILD_TAGS[@]}"; do
            echo "${TAG}"
          done
          echo "default_tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "build_tags=${BUILD_TAGS[*]}" >> "$GITHUB_OUTPUT"

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=m2os is my OCI image built from ublue projects. It mainly extends them for my uses.
            org.opencontainers.image.version=${{ env.version }}
            ostree.linux=${{ env.kernel_release }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate_tags.outputs.build_tags }}
          build-args: |
            IMAGE=${{ env.image }}
            TAG_VERSION=${{ env.tag_version }}
            FEDORA_VERSION=${{ env.fedora_version }}
          labels: ${{ steps.meta.outputs.labels }}
          extra-args: |
            --target stage1
          oci: false

      - name: Check Secureboot
        id: secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          podman run --rm "${{ env.IMAGE_NAME }}":$(echo "${{ steps.generate_tags.outputs.build_tags }}" | cut -d " " -f 1) /bin/bash -c "cat /usr/lib/modules/*/vmlinuz" > vmlinuz
          sbverify --list vmlinuz
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push to GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: m2os
            tags: ${{ steps.generate_tags.outputs.build_tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@v3.5.0
        if: github.event_name != 'pull_request'

      - name: Sign Container Image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/m2os@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo Outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"